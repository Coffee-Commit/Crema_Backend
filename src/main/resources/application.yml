# 메인 설정 파일 - 프로필 선택
spring:
  profiles:
    # 여기서 원하는 프로필을 활성화
    # local: 로컬 개발용 (OAuth -> Swagger 리다이렉트)
    # dev: dev 서버용 (OAuth -> 프론트엔드 리다이렉트)
    active: local  # 기본값: local, dev 서버에서는 환경변수로 오버라이드

---
# 공통 설정 (모든 프로필에서 사용)
spring:
  application:
    name: Crema
  config:
    import:
      - optional:file:.env[.properties]
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 15MB
  datasource:
    hikari:
      minimum-idle: 20
      maximum-pool-size: 50
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
    url: jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000ms
      connect-timeout: 2000ms
      lettuce:
        pool:
          max-active: 10
          max-idle: 10
          min-idle: 2
  profiles:
    include: oauth
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/api/login/oauth2/code/google"
            scope:
              - profile
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/api/login/oauth2/code/kakao"
            scope:
              - profile_nickname
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
  cloud:
    gcp:
      project-id: "${GCP_PROJECT_ID}"
      storage:
        bucket-name: "${GCS_BUCKET_NAME}"

server:
  port: 8080

jwt:
  secret: ${JWT_KEY}
  access-token-expiration: 1800000  # 30분
  refresh-token-expiration: 1209600000  # 14일

openvidu:
  domain: ${OPENVIDU_DOMAIN}
  secret: ${OPENVIDU_SECRET}

# 모니터링 관련 설정
management:
  server:
    port: 9090
  endpoints:
    web:
      exposure:
        include: health, metrics, prometheus
  metrics:
    export:
      prometheus:
        enabled: true
  influx:
    metrics:
      export:
        uri: http://localhost:8086
        bucket: jmeter-metrics
        token: my-super-secret-token
        org: my-org
        enabled: ${INFLUX_ENABLE:false}
